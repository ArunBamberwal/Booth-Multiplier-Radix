// Code your design here
// Code your design here
// Code your design here
// datapath 
module BOOTH (ldA, ldQ, ldM, clrA, clrQ, clrM, clrff, sftA, sftQ,sftD, 
              addsub, decr, ldcnt, data_in, clk, q0,qm1, eqz,OUT); 
  
  
   input ldA, ldQ, ldM, ldcnt, decr,clrA, clrQ, clrff, sftA, sftQ, addsub, clk, sftD, clrM; 
   input [15:0] data_in; 
   output qm1, eqz; 
   output q0;
   output [31:0] OUT;
   wire [15:0] A, M, Q, Z; 
   wire [4:0] count; 
  
  
   assign eqz = ~|count; // For checking count is zero or not 
  assign OUT = {A,Q};
   assign q0 = Q[0];
  
  shiftreg AR (A, Z, A[15], clk, ldA, clrA, sftA); // it's first shiftregister in which intially nothing is stored
  
  shiftreg QR (Q, data_in, A[0], clk, ldQ, clrQ, sftQ); // it's second register i n which i store one value from input come
  
  dff QM1 (Q[0], qm1, clk, sftD, clrff); // we are adding one extra bit in last and check that bit and LSB of Q shiftregister
   
  PIPO MR (M, data_in, clk, clrM, ldM); //In this we store second value which come as output 
  
  ALU AS (Z, A, M, addsub); // its perform addition or subtraction if 01 or 10  value of q0:qm1
  
  counter CN (count, decr, ldcnt, clk); //This counter count how many multiplication is done if it's value become 0 mean multiplication is done
  
endmodule


module shiftreg (data_out,data_in, s_in, clk, ld, clr, sft); 
  
 input s_in, clk, ld, clr, sft; 
 input [15:0] data_in; 
 output reg [15:0] data_out; 
  
 always @(posedge clk) 
            begin 
                if (clr)
                  data_out <= 0; 
                else if (ld) 
                       data_out <= data_in; 
               else if (sft) 
                       data_out <= {s_in,data_out[15:1]}; 
            end 
endmodule


// Parallel in parallel out regirter
module PIPO (data_out,data_in, clk, clrM, load);
  
 input [15:0] data_in; 
 input load, clk, clrM; 
 output reg [15:0] data_out; 
 
  always @(posedge clk)
  begin
  if (clrM) data_out<= 0;
  else if (load) data_out <= data_in; 
end
endmodule 

// D-Flip Flop 
module dff (d, q, clk, sftD, clr); 

  input d, clk, clr, sftD; 
  output reg q; 
 
  always @(posedge clk)
    begin
      if (clr) q <= 0;
      else if(sftD) q <= d;
    end
endmodule



// Its perform addition and subtraction 
module ALU (out, in1, in2, addsub); 

  input [15:0] in1, in2; 
 input addsub; 
 output reg [15:0] out; 
 
  always @(*) 
   begin 
     if (addsub == 0) out = in1 - in2; 
     else if (addsub ==1)out = in1 + in2;
     else out = out;
   end 
endmodule




module counter (data_out, decr, ldcnt, clk); 
  
  input decr,ldcnt, clk; 
   output reg [4:0] data_out; 
  
  always @(posedge clk) 
   begin 
     if (ldcnt)
       data_out <= 5'b10000; 
     else if (decr)
       begin
       data_out <= data_out - 1 ;
       end
   end 
endmodule 


/*
// It is control path (It behave like Finite state machine)
module controller (ldA, clrA, sftA, ldQ, clrQ, sftQ, ldM, clrff, addsub, start, 
 decr, ldcnt, done, clk, q0, qm1, eqz); 

  input clk, q0, qm1, eqz, start; 
 output reg ldA, clrA, sftA, ldQ, clrQ, sftQ, ldM, clrff, addsub,decr, ldcnt, done; 
 reg [2:0] state; 

 parameter S0=3'b000, S1=3'b001, S2=3'b010, S3=3'b011, S4=3'b100, S5=3'b101, S6=3'b110; 

  always @(posedge clk) 
   begin 
    case (state) 
    
      S0: if (start) state <= S1;
      
      S1: state <= S2; 
  
      S2: begin if 
         ({q0,qm1}==2'b01) state <= S3; 
      else if
        ({q0,qm1}==2'b10) state <= S4; 
      else if (q0~^qm1)
       state <= S5; 
    end
      S3: state <= S5;
   
      S4: state <= S5; 
   
      S5: begin if (({q0,qm1}==2'b01) && !eqz) state <= S3; 
      else if (({q0,qm1}==2'b10) && !eqz) state <= S4; 
      else if (eqz) state <= S6; 
   end
      S6: state <= S6; 
    
      default: state <= S0; 
   endcase
  end
  
  
  always @(state) 
   begin 
    case (state) 
    
      S0: begin clrA = 1; ldA = 0; sftA = 0; clrQ = 1; ldQ = 0; sftQ = 0; 
    ldM = 0; clrff = 1; done = 0; end 
 
      S1: begin clrA = 1; clrff = 1; ldcnt = 1; ldM = 1; end 

      S2: begin clrA = 0; clrff = 0; ldcnt = 0; ldM = 0; ldQ = 1; clrQ=0; end 

      S3: begin ldA = 1; addsub = 1; ldQ = 0; sftA = 0; sftQ = 0; decr = 0; end 
 
      S4: begin ldA = 1; addsub = 0; ldQ = 0; sftA = 0; sftQ = 0; decr = 0; end 

      S5: begin sftA = 1; sftQ = 1; ldA = 0; ldQ = 0; decr = 1; end 

      S6: done = 1; 
 
      default: begin clrA = 0; sftA = 0; ldQ = 0; sftQ = 0; end 

    endcase
 end
  
endmodule

*/
// Code your testbench here
// or browse Examples
//module Booth_test ;
 /* reg clk, start;
  
  reg [15:0] data_in;
  wire done;
   wire [31:0] OUT;
   
   
   //reg ldA, ldQ, ldM, ldcnt, decr,clrA, clrQ, clrff, sftA, sftQ, addsub; 
    
   wire qm1, eqz; 
   wire q0;
   
   wire ldA, clrA, sftA, ldQ, clrQ, sftQ, ldM, clrff, addsub,decr, ldcnt; 
  
  BOOTH BM (ldA, ldQ, ldM, clrA, clrQ, clrff, sftA, sftQ, 
              addsub, decr, ldcnt, data_in, clk, q0,qm1, eqz,OUT);
  
  controller BMC (ldA, clrA, sftA, ldQ, clrQ, sftQ, ldM, clrff, addsub, start, 
 decr, ldcnt, done, clk, q0, qm1, eqz);
  */
  
/*

module top (data_in, start, clk, done, OUT);
input [15:0] data_in;
input start, clk;
output done;
output [31:0] OUT;

wire ldA, clrA, sftA, ldQ, clrQ, sftQ, ldM, clrff, addsub, start, 
 decr, ldcnt, done, clk, q0, qm1, eqz, clrM, sftD;

BOOTH BM (ldA, ldQ, ldM, clrA, clrQ, clrM, clrff, sftA, sftQ, sftD, 
              addsub, decr, ldcnt, data_in, clk, q0,qm1, eqz,OUT);
  
  controller BMC (clk, start, q0, qm1, eqz, ldA, clrA, sftA, ldQ, clrQ, sftQ, ldM, clrM, sftD, clrff, addsub, ldcnt, decr, done);

endmodule  */



module controller(clk, start, q0, qm1, eqz, ldA, clrA, sftA, ldQ, clrQ, sftQ, ldM, clrM, sftD, clrff, addsub, ldcnt, decr, done);


input clk, start, q0, qm1, eqz;
output ldA, clrA, sftA, ldQ, clrQ, sftQ, ldM, clrM, sftD, clrff, addsub, ldcnt, decr, done;

parameter	S0=3'd0,
			S1=3'd1,
			S2=3'd2,
			S3=3'd3,
			S4=3'd4,
			S5=3'd5,
			S6=3'd6;
			
reg [2:0] state, next_state;

always@(posedge clk)
state <= next_state;

always@(state or q0 or qm1 or eqz or start)
begin
next_state = S0;
case(state)
S0: next_state = start ? S1:S0;
S1: next_state = S2;
S2: begin
	
	if({q0, qm1} == 2'd1) next_state = S3;
	else if({q0, qm1} == 2'd2) next_state = S4;
	else if(q0==qm1) next_state = S5;
    else next_state = S2;
    end
	
S3: next_state = S5;
S4: next_state = S5;
S5: begin

	if(({q0, qm1} == 2'd1) && !eqz) next_state = S3;
	else if(({q0, qm1} == 2'd2) && !eqz) next_state = S4;
	else if(eqz) next_state = S6;
	else next_state = S5;
	end
S6: next_state = S6;
endcase
end

assign ldA = ((state==S3) || (state==S4))? 1:0;
assign clrA = (state==S1)?1:0;
assign sftA = (state==S5)?1:0;
assign ldQ = (state==S2)?1:0;
assign clrQ = (state==S0)?1:0;
assign sftQ = (state==S5)?1:0;
assign ldM = (state==S1)?1:0;
assign clrM = (state==S0)?1:0;
assign sftD = (state==S5)?1:0;
assign clrff = (state==S0)?1:0;
  assign addsub = ~(state==S4);
  assign addsub = (state==S3);
assign ldcnt = (state==S1)?1:0;
assign decr = (state==S5)?1:0;
assign done = (state==S6)?1:0;

endmodule